-- BORRADO COMPLETO DE OBJETOS EXISTENTES (en orden adecuado)

-- Triggers
BEGIN
    FOR rec IN (SELECT trigger_name FROM user_triggers) LOOP
        EXECUTE IMMEDIATE 'DROP TRIGGER ' || rec.trigger_name;
    END LOOP;
END;
/

-- Procedimientos y funciones
BEGIN
    EXECUTE IMMEDIATE 'DROP PROCEDURE enviar_notificacion';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP FUNCTION calcular_edad';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

-- Tablas (en orden de dependencias)
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE notificaciones CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE cita CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE solicitud_adopcion CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE perro_patologia CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE perro CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE patologia CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE raza CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE usuario_cliente CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE usuario_protectora CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE redes_sociales CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE cliente CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE protectora CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/


-- CREACIÓN DE LAS TABLAS

CREATE TABLE protectora (
    protectora_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    cif VARCHAR2(50) UNIQUE,
    nombre VARCHAR2(100),
    telefono VARCHAR2(255) NOT NULL,
    correo_electronico VARCHAR2(255),
    localidad VARCHAR2(100),
    provincia VARCHAR2(100),
    pais VARCHAR2(100),
    tipo_via VARCHAR2(100),
    nombre_via VARCHAR2(100),
    codigo_postal VARCHAR2(10),
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE redes_sociales (
    id_red_social NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_protectora NUMBER,
    red_social VARCHAR2(255),
    fecha_alta DATE,
    fecha_modificacion DATE,
    CONSTRAINT fk_redes_protectora FOREIGN KEY (id_protectora)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE
);

CREATE TABLE cliente (
    cliente_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100),
    apellido1 VARCHAR2(100),
    apellido2 VARCHAR2(100),
    fecha_nacimiento DATE,
    telefono VARCHAR2(20),
    correo_electronico VARCHAR2(255),
    codigo_postal VARCHAR2(10),
    localidad VARCHAR2(100),
    provincia VARCHAR2(100),
    pais VARCHAR2(100),
    tipo_via VARCHAR2(100),
    nombre_via VARCHAR2(100),
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE usuario_cliente (
    id_usuario_cliente NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre_usuario VARCHAR2(100) UNIQUE,
    contrasena VARCHAR2(100),
    correo_electronico VARCHAR2(255) UNIQUE,
    cliente_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,

    CONSTRAINT fk_usuario_cliente_id FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE
);

CREATE TABLE usuario_protectora (
    id_usuario_protectora NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre_usuario VARCHAR2(100) UNIQUE,
    contrasena VARCHAR2(100),
    correo_electronico VARCHAR2(255) UNIQUE,
    id_protectora NUMBER, 
    fecha_alta DATE,
    fecha_modificacion DATE,
    
    CONSTRAINT fk_usuario_protectora_id FOREIGN KEY (id_protectora)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE
);

CREATE TABLE raza (
    id_raza NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) UNIQUE,
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE patologia (
    id_patologia NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) UNIQUE,
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE perro (
    perro_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100),
    foto VARCHAR2(255),
    fecha_nacimiento DATE,
    raza NUMBER,
    sexo VARCHAR2(10),
    adoptado VARCHAR2(2) DEFAULT 'No',
    protectora_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,
    CONSTRAINT fk_perro_protectora FOREIGN KEY (protectora_id)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_perro_raza FOREIGN KEY (raza)
        REFERENCES raza(id_raza)
);

CREATE TABLE perro_patologia (
    id_perro_patologia NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    perro_id NUMBER,
    id_patologia NUMBER,
    descripcion_pat VARCHAR2(255),
    fecha_alta DATE,
    fecha_modificacion DATE,
    CONSTRAINT fk_pp_perro FOREIGN KEY (perro_id)
        REFERENCES perro(perro_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_pp_patologia FOREIGN KEY (id_patologia)
        REFERENCES patologia(id_patologia)
);

CREATE TABLE solicitud_adopcion (
    id_solicitud NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    donacion NUMBER(10,2),
    estado VARCHAR2(50),
    perro_id NUMBER,
    cliente_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,
    
    CONSTRAINT fk_solicitud_perro FOREIGN KEY (perro_id)
        REFERENCES perro(perro_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_solicitud_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE
);

-- CREACIÓN DE LA TABLA CITA
CREATE TABLE cita (
    id_cita NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    donacion NUMBER(10,2),
    correo_electronico VARCHAR2(50),
    estado VARCHAR2(50) DEFAULT 'pendiente',
    fecha_cita DATE,
    hora_cita VARCHAR2(10),
    cliente_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,
    
    CONSTRAINT fk_cita_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
);

CREATE TABLE notificaciones (
    id_notificacion NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nueva_cita VARCHAR2(5),
    cancelar_cita VARCHAR2(5),
    nueva_adopcion VARCHAR2(5),
    cambio_solicitud VARCHAR2(5),
    protectora_id NUMBER,
    cliente_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,
    CONSTRAINT fk_notif_protectora FOREIGN KEY (protectora_id)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_notif_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE
);

-- FUNCIONES

-- Función para calcular la edad
CREATE OR REPLACE FUNCTION calcular_edad(fecha_nacimiento DATE)
RETURN NUMBER
IS
    edad NUMBER;
BEGIN
    edad := TRUNC(MONTHS_BETWEEN(SYSDATE, fecha_nacimiento) / 12);
    RETURN edad;
END;
/

-- PROCEDIMIENTOS
CREATE OR REPLACE PROCEDURE enviar_notificacion (
    nueva_cita_noti IN VARCHAR2 DEFAULT 'No',
    cancelar_cita_noti IN VARCHAR2 DEFAULT 'No',
    nueva_adopcion_noti IN VARCHAR2 DEFAULT 'No',
    cambio_solicitud_noti IN VARCHAR2 DEFAULT 'No',
    protectora_id_noti IN NUMBER DEFAULT NULL,
    cliente_id_noti IN NUMBER DEFAULT NULL
)
IS
BEGIN
    INSERT INTO notificaciones (
        nueva_cita,
        cancelar_cita,
        nueva_adopcion,
        cambio_solicitud,
        protectora_id,
        cliente_id
    ) VALUES (
        nueva_cita_noti,
        cancelar_cita_noti,
        nueva_adopcion_noti,
        cambio_solicitud_noti,
        protectora_id_noti,
        cliente_id_noti
    );
END;
/

-- DISPARADORES FECHA ALTA Y FECHA MODIFICACIÓN

-- Disparador para INSERT Cliente
CREATE OR REPLACE TRIGGER fecha_cliente_disparador_insert
BEFORE INSERT ON cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Cliente
CREATE OR REPLACE TRIGGER fecha_cliente_disparador_update
BEFORE UPDATE ON cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Protectora
CREATE OR REPLACE TRIGGER fecha_protectora_disparador_insert
BEFORE INSERT ON protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Protectora
CREATE OR REPLACE TRIGGER fecha_protectora_disparador_update
BEFORE UPDATE ON protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Raza
CREATE OR REPLACE TRIGGER fecha_raza_disparador_insert
BEFORE INSERT ON raza
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Raza
CREATE OR REPLACE TRIGGER fecha_raza_disparador_update
BEFORE UPDATE ON raza
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Patologia
CREATE OR REPLACE TRIGGER fecha_patologia_disparador_insert
BEFORE INSERT ON patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Patologia
CREATE OR REPLACE TRIGGER fecha_patologia_disparador_update
BEFORE UPDATE ON patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Perro
CREATE OR REPLACE TRIGGER fecha_perro_disparador_insert
BEFORE INSERT ON perro
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Perro
CREATE OR REPLACE TRIGGER fecha_perro_disparador_update
BEFORE UPDATE ON perro
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Perro-Patologia
CREATE OR REPLACE TRIGGER fecha_perro_patologia_disparador_insert
BEFORE INSERT ON perro_patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Perro-Patologia
CREATE OR REPLACE TRIGGER fecha_perro_patologia_disparador_update
BEFORE UPDATE ON perro_patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;

-- Disparador para INSERT Solicitud-Adopcion
CREATE OR REPLACE TRIGGER fecha_solicitud_disparador_insert
BEFORE INSERT ON solicitud_adopcion
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Solicitud-Adopcion
CREATE OR REPLACE TRIGGER fecha_solicitud_disparador_update
BEFORE UPDATE ON solicitud_adopcion
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Cita
CREATE OR REPLACE TRIGGER fecha_cita_disparador_insert
BEFORE INSERT ON cita
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Cita
CREATE OR REPLACE TRIGGER fecha_cita_disparador_update
BEFORE UPDATE ON cita
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Notificaciones
CREATE OR REPLACE TRIGGER fecha_notificaciones_disparador_insert
BEFORE INSERT ON notificaciones
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Notificaciones
CREATE OR REPLACE TRIGGER fecha_notificaciones_disparador_update
BEFORE UPDATE ON notificaciones
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Redes Sociales
CREATE OR REPLACE TRIGGER fecha_redes_sociales_insert
BEFORE INSERT ON redes_sociales
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Redes Sociales
CREATE OR REPLACE TRIGGER fecha_redes_sociales_update
BEFORE UPDATE ON redes_sociales
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Usuario Cliente
CREATE OR REPLACE TRIGGER fecha_usuario_cliente_insert
BEFORE INSERT ON usuario_cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Usuario Cliente
CREATE OR REPLACE TRIGGER fecha_usuario_cliente_update
BEFORE UPDATE ON usuario_cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Usuario Protectora
CREATE OR REPLACE TRIGGER fecha_usuario_protectora_insert
BEFORE INSERT ON usuario_protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Usuario Protectora
CREATE OR REPLACE TRIGGER fecha_usuario_protectora_update
BEFORE UPDATE ON usuario_protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/


-- BORRADO DE DATOS

DELETE FROM notificaciones;
DELETE FROM cita;
DELETE FROM solicitud_adopcion;
DELETE FROM perro_patologia;
DELETE FROM perro;
DELETE FROM patologia;
DELETE FROM raza;
DELETE FROM usuario_cliente;
DELETE FROM usuario_protectora;
DELETE FROM redes_sociales;
DELETE FROM cliente;
DELETE FROM protectora;

-- Selects ID

SELECT id_protectora FROM protectora;
SELECT id_cliente FROM cliente;
SELECT id_raza FROM raza;
SELECT id_patologia FROM patologia;

-- INSERTS de prueba

-- 1. Insertar protectora
INSERT INTO protectora (cif, nombre, telefono, correo_electronico, localidad, provincia, pais, tipo_via, nombre_via, codigo_postal)
VALUES ('G12345678', 'Protectora Madrid', '911234567', 'info@protectomad.es', 'Madrid', 'Madrid', 'España', 'Calle', 'Gran Vía', '28013');

-- 2. Insertar cliente
INSERT INTO cliente (nombre, apellido1, apellido2, fecha_nacimiento, telefono, correo_electronico, codigo_postal, localidad, provincia, pais, tipo_via, nombre_via)
VALUES ('Luis', 'Gómez', 'Martínez', TO_DATE('1990-05-15', 'YYYY-MM-DD'), '600123456', 'luis.gomez@example.com', '28014', 'Madrid', 'Madrid', 'España', 'Calle', 'Alcalá');

-- 3. Insertar redes sociales
INSERT INTO redes_sociales (id_protectora, red_social)
VALUES (1, 'Instagram: @protectomad');

-- 4. Insertar usuario_cliente
INSERT INTO usuario_cliente (nombre_usuario, contrasena, correo_electronico, cliente_id)
VALUES ('luisgomez', 'pass123', 'luis.gomez@example.com', 1);

-- 5. Insertar usuario_protectora
INSERT INTO usuario_protectora (nombre_usuario, contrasena, correo_electronico, id_protectora)
VALUES ('admin_madrid', 'adminpass', 'admin@protectomad.es', 1);

-- 6. Insertar raza
INSERT INTO raza (nombre) VALUES ('Labrador');

-- 7. Insertar patología
INSERT INTO patologia (nombre) VALUES ('Otitis');

-- 8. Insertar perro
INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, protectora_id)
VALUES ('Toby', 'foto_toby.jpg', TO_DATE('2022-01-01', 'YYYY-MM-DD'), 1, 'Macho', 1);

-- 9. Insertar perro_patologia
INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (1, 1, 'Tratamiento mensual con gotas');

-- 10. Insertar solicitud_adopcion
INSERT INTO solicitud_adopcion (donacion, estado, perro_id, cliente_id)
VALUES (60.00, 'Pendiente', 1, 1);

-- 11. Insertar cita
INSERT INTO cita (donacion, estado, fecha_cita, hora_cita, cliente_id)
VALUES (10.00, 'Pendiente', TO_DATE('2025-06-01', 'YYYY-MM-DD'), '10:00', 1);

-- 12. Insertar notificación
INSERT INTO notificaciones (nueva_cita, cancelar_cita, nueva_adopcion, cambio_solicitud, protectora_id, cliente_id)
VALUES ('Sí', 'No', 'Sí', 'No', 1, 1);
