-- Eliminar Triggers solo relacionados con tablas específicas
BEGIN
    FOR rec IN (
        SELECT trigger_name
        FROM user_triggers
        WHERE table_name IN (
            'CLIENTE', 'PROTECTORA', 'PERRO', 'RAZA', 'PATOLOGIA',
            'PERRO_PATOLOGIA', 'SOLICITUD_ADOPCION', 'CITA',
            'USUARIO_CLIENTE', 'USUARIO_PROTECTORA', 'REDES_SOCIALES',
            'NOTIFICACIONES_CLIENTE', 'NOTIFICACIONES_PROTECTORA'
        )
    ) LOOP
        EXECUTE IMMEDIATE 'DROP TRIGGER ' || rec.trigger_name;
    END LOOP;
END;
/

-- Eliminar Procedimientos
BEGIN
    EXECUTE IMMEDIATE 'DROP PROCEDURE enviar_notificacion';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP PROCEDURE eliminar_perro';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

-- Eliminar Funciones
BEGIN
    EXECUTE IMMEDIATE 'DROP FUNCTION calcular_edad';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP FUNCTION contar_perros_adoptados';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

-- Eliminar Tablas (en orden correcto y sin duplicados)
BEGIN
    FOR tabla IN (
        SELECT table_name FROM user_tables
        WHERE table_name IN (
            'NOTIFICACIONES_CLIENTE', 'NOTIFICACIONES_PROTECTORA',
            'CITA', 'SOLICITUD_ADOPCION', 'PERRO_PATOLOGIA',
            'PERRO', 'PATOLOGIA', 'RAZA', 'USUARIO_CLIENTE',
            'USUARIO_PROTECTORA', 'REDES_SOCIALES', 'CLIENTE',
            'PROTECTORA'
        )
    ) LOOP
        EXECUTE IMMEDIATE 'DROP TABLE ' || tabla.table_name || ' CASCADE CONSTRAINTS';
    END LOOP;
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

-- CREACIÓN DE LAS TABLAS

CREATE TABLE protectora (
    protectora_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    cif VARCHAR2(50) UNIQUE,
    nombre VARCHAR2(100),
    telefono VARCHAR2(255) NOT NULL,
    correo_electronico VARCHAR2(255),
    localidad VARCHAR2(100),
    provincia VARCHAR2(100),
    pais VARCHAR2(100),
    tipo_via VARCHAR2(100),
    nombre_via VARCHAR2(100),
    codigo_postal VARCHAR2(10),
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE redes_sociales (
    id_protectora NUMBER,
    nombre_red VARCHAR2(100),
    usuario_red VARCHAR2(100),

    fecha_alta DATE,
    fecha_modificacion DATE,

    CONSTRAINT pk_redes PRIMARY KEY (id_protectora, nombre_red),
    CONSTRAINT fk_redes_protectora FOREIGN KEY (id_protectora)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE
);

CREATE TABLE cliente (
    cliente_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100),
    apellido1 VARCHAR2(100),
    apellido2 VARCHAR2(100),
    fecha_nacimiento DATE,
    telefono VARCHAR2(20),
    correo_electronico VARCHAR2(255),
    codigo_postal VARCHAR2(10),
    localidad VARCHAR2(100),
    provincia VARCHAR2(100),
    pais VARCHAR2(100),
    tipo_via VARCHAR2(100),
    nombre_via VARCHAR2(100),
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE usuario_cliente (
    id_usuario_cliente NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre_usuario VARCHAR2(100) UNIQUE,
    contrasena VARCHAR2(100) UNIQUE,
    correo_electronico VARCHAR2(255) UNIQUE,
    cliente_id NUMBER UNIQUE,
    fecha_alta DATE,
    fecha_modificacion DATE,

    CONSTRAINT fk_usuario_cliente_id FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE
);

CREATE TABLE usuario_protectora (
    id_usuario_protectora NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre_usuario VARCHAR2(100) UNIQUE,
    contrasena VARCHAR2(100),
    correo_electronico VARCHAR2(255) UNIQUE,
    id_protectora NUMBER UNIQUE,
    fecha_alta DATE,
    fecha_modificacion DATE,

    CONSTRAINT fk_usuario_protectora_id FOREIGN KEY (id_protectora)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE
);

CREATE TABLE raza (
    id_raza NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) UNIQUE,
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE patologia (
    id_patologia NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) UNIQUE,
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE perro (
    perro_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100),
    foto VARCHAR2(255),
    fecha_nacimiento DATE,
    raza NUMBER,
    sexo VARCHAR2(1) CHECK (sexo IN ('M', 'F')),
    adoptado VARCHAR2(2) CHECK (adoptado IN ('Si', 'No')),
    protectora_id NUMBER,
    cliente_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,
    
    CONSTRAINT fk_perro_protectora FOREIGN KEY (protectora_id)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_perro_raza FOREIGN KEY (raza)
        REFERENCES raza(id_raza),
    CONSTRAINT fk_perro_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE SET NULL
);

CREATE TABLE perro_patologia (
    perro_id NUMBER,
    id_patologia NUMBER,
    descripcion_pat VARCHAR2(255),
    fecha_alta DATE,
    fecha_modificacion DATE,
    CONSTRAINT pk_perro_patologia PRIMARY KEY (perro_id, id_patologia),
    CONSTRAINT fk_pp_perro FOREIGN KEY (perro_id)
        REFERENCES perro(perro_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_pp_patologia FOREIGN KEY (id_patologia)
        REFERENCES patologia(id_patologia)
);

CREATE TABLE solicitud_adopcion (
    perro_id NUMBER,
    cliente_id NUMBER,
    donacion NUMBER(10,2),
    estado VARCHAR2(50),
    fecha_alta DATE,
    fecha_modificacion DATE,
    
    CONSTRAINT pk_solicitud_adopcion PRIMARY KEY (perro_id, cliente_id),
    CONSTRAINT fk_solicitud_perro FOREIGN KEY (perro_id)
        REFERENCES perro(perro_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_solicitud_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE
);

CREATE TABLE cita (
    id_cita NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    donacion NUMBER(10,2),
    correo_electronico VARCHAR2(50),
    estado VARCHAR2(50) DEFAULT 'pendiente',
    fecha_cita DATE,
    hora_cita VARCHAR2(10),
    cliente_id NUMBER,
    perro_id NUMBER,
    protectora_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,

    CONSTRAINT fk_cita_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_cita_perro FOREIGN KEY (perro_id)
        REFERENCES perro(perro_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_cita_protectora FOREIGN KEY (protectora_id)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE
);

CREATE TABLE notificaciones_cliente (
    id_notificacion NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nueva_cita VARCHAR2(5),
    informacion VARCHAR2(155),
    protectora_id NUMBER,
    cliente_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,
    CONSTRAINT fk_notif_protectora FOREIGN KEY (protectora_id)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_notif_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE
);

CREATE TABLE notificaciones_protectora (
    id_notificacionP NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nueva_cita VARCHAR2(5),
    informacion VARCHAR2(155),
    protectora_id NUMBER,
    cliente_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,
    CONSTRAINT fk_not_protectora FOREIGN KEY (protectora_id)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_not_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE
);

-- FUNCIONES

-- Función para calcular la edad
CREATE OR REPLACE FUNCTION calcular_edad(fecha_nacimiento DATE)
RETURN NUMBER
IS
    edad NUMBER;
BEGIN
    edad := TRUNC(MONTHS_BETWEEN(SYSDATE, fecha_nacimiento) / 12);
    RETURN edad;
END;
/

-- Función para contar los perros que han sido adoptados.
CREATE OR REPLACE FUNCTION contar_perros_adoptados (protectoraid IN NUMBER)
RETURN NUMBER
IS
    contados NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO contados
    FROM perro
    WHERE protectora_id = protectoraid
    AND adoptado = 'Si';
    
    RETURN contados;
END;
/

-- PROCEDIMIENTOS

-- Procedimiento para enviar notificaciones.
CREATE OR REPLACE PROCEDURE enviar_notificacion (
    nueva_cita_noti IN VARCHAR2 DEFAULT 'No',
    informacion_noti IN VARCHAR2 DEFAULT NULL,
    protectora_id_noti IN NUMBER DEFAULT NULL,
    cliente_id_noti IN NUMBER DEFAULT NULL
)
IS
BEGIN
    INSERT INTO notificaciones_cliente (
        nueva_cita,
        informacion,
        protectora_id,
        cliente_id,
        fecha_alta,
        fecha_modificacion
    ) VALUES (
        nueva_cita_noti,
        informacion_noti,
        protectora_id_noti,
        cliente_id_noti,
        SYSDATE,
        SYSDATE
    );
END;
/

-- Procedimiento para eliminar un perro al completo.
CREATE OR REPLACE PROCEDURE eliminar_perro (perroid IN NUMBER)
IS
    existe NUMBER;
BEGIN
    SELECT COUNT(*) INTO existe FROM perro WHERE perro_id = perroid;

    IF existe = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El perro con ese ID no existe.');
    END IF;

    DELETE FROM cita WHERE perro_id = perroid;
    DELETE FROM perro_patologia WHERE perro_id = perroid;
    DELETE FROM perro WHERE perro_id = perroid;
END;
/

-- DISPARADORES FECHA ALTA Y FECHA MODIFICACIÓN

-- Disparador para INSERT Cliente
CREATE OR REPLACE TRIGGER fecha_cliente_disparador_insert
BEFORE INSERT ON cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Cliente
CREATE OR REPLACE TRIGGER fecha_cliente_disparador_update
BEFORE UPDATE ON cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Protectora
CREATE OR REPLACE TRIGGER fecha_protectora_disparador_insert
BEFORE INSERT ON protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Protectora
CREATE OR REPLACE TRIGGER fecha_protectora_disparador_update
BEFORE UPDATE ON protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Raza
CREATE OR REPLACE TRIGGER fecha_raza_disparador_insert
BEFORE INSERT ON raza
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Raza
CREATE OR REPLACE TRIGGER fecha_raza_disparador_update
BEFORE UPDATE ON raza
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Patologia
CREATE OR REPLACE TRIGGER fecha_patologia_disparador_insert
BEFORE INSERT ON patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Patologia
CREATE OR REPLACE TRIGGER fecha_patologia_disparador_update
BEFORE UPDATE ON patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Perro
CREATE OR REPLACE TRIGGER fecha_perro_disparador_insert
BEFORE INSERT ON perro
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Perro
CREATE OR REPLACE TRIGGER fecha_perro_disparador_update
BEFORE UPDATE ON perro
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Perro-Patologia
CREATE OR REPLACE TRIGGER fecha_perro_patologia_disparador_insert
BEFORE INSERT ON perro_patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Perro-Patologia
CREATE OR REPLACE TRIGGER fecha_perro_patologia_disparador_update
BEFORE UPDATE ON perro_patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Solicitud-Adopcion
CREATE OR REPLACE TRIGGER fecha_solicitud_disparador_insert
BEFORE INSERT ON solicitud_adopcion
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Solicitud-Adopcion
CREATE OR REPLACE TRIGGER fecha_solicitud_disparador_update
BEFORE UPDATE ON solicitud_adopcion
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Cita
CREATE OR REPLACE TRIGGER fecha_cita_disparador_insert
BEFORE INSERT ON cita
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Redes Sociales
CREATE OR REPLACE TRIGGER fecha_redes_sociales_insert
BEFORE INSERT ON redes_sociales
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Redes Sociales
CREATE OR REPLACE TRIGGER fecha_redes_sociales_update
BEFORE UPDATE ON redes_sociales
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Usuario Cliente
CREATE OR REPLACE TRIGGER fecha_usuario_cliente_insert
BEFORE INSERT ON usuario_cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Usuario Cliente
CREATE OR REPLACE TRIGGER fecha_usuario_cliente_update
BEFORE UPDATE ON usuario_cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Usuario Protectora
CREATE OR REPLACE TRIGGER fecha_usuario_protectora_insert
BEFORE INSERT ON usuario_protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Usuario Protectora
CREATE OR REPLACE TRIGGER fecha_usuario_protectora_update
BEFORE UPDATE ON usuario_protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Notificaciones Cliente
CREATE OR REPLACE TRIGGER fecha_notificaciones_cliente_insert
BEFORE INSERT ON notificaciones_cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Notificaciones Cliente
CREATE OR REPLACE TRIGGER fecha_notificaciones_cliente_update
BEFORE UPDATE ON notificaciones_cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Notificaciones Protectora
CREATE OR REPLACE TRIGGER fecha_notificaciones_protectora_insert
BEFORE INSERT ON notificaciones_protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Notificaciones Protectora
CREATE OR REPLACE TRIGGER fecha_notificaciones_protectora_update
BEFORE UPDATE ON notificaciones_protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- BORRADO DE DATOS

DELETE FROM notificaciones_cliente;
DELETE FROM notificaciones_protectora;
DELETE FROM cita;
DELETE FROM solicitud_adopcion;
DELETE FROM perro_patologia;
DELETE FROM perro;
DELETE FROM patologia;
DELETE FROM raza;
DELETE FROM usuario_cliente;
DELETE FROM usuario_protectora;
DELETE FROM redes_sociales;
DELETE FROM cliente;
DELETE FROM protectora;

-- Selects ID

SELECT protectora_id FROM protectora;
SELECT cliente_id FROM cliente;
SELECT id_raza FROM raza;
SELECT id_patologia FROM patologia;

-- INSERTS de datos

INSERT INTO protectora (cif, nombre, telefono, correo_electronico, localidad, provincia, pais, tipo_via, nombre_via, codigo_postal)
VALUES ('X12345678', 'Huellas Felices', '912345678', 'contacto@huellasfelices.org', 'Madrid', 'Madrid', 'España', 'Calle', 'Gran Vía', '28013');

INSERT INTO redes_sociales (id_protectora, nombre_red, usuario_red)
VALUES (1, 'Instagram', '@huellasfelices');

INSERT INTO redes_sociales (id_protectora, nombre_red, usuario_red)
VALUES (1, 'Facebook', 'HuellasFelicesMadrid');

INSERT INTO usuario_protectora (nombre_usuario, contrasena, correo_electronico, id_protectora)
VALUES ('adminHuellas', 'adminpass456', 'admin@huellasfelices.org', 1);

-- 1. Insertar patología
INSERT INTO patologia (nombre) VALUES ('Alergia');
INSERT INTO patologia (nombre) VALUES ('Displasia de cadera');
INSERT INTO patologia (nombre) VALUES ('Problemas dentales');
INSERT INTO patologia (nombre) VALUES ('Artritis');
INSERT INTO patologia (nombre) VALUES ('Cardiopatía');
INSERT INTO patologia (nombre) VALUES ('Cáncer');

-- 2. Insertar raza
INSERT INTO raza (nombre) VALUES ('Labrador');
INSERT INTO raza (nombre) VALUES ('Bulldog');
INSERT INTO raza (nombre) VALUES ('Chihuahua');
INSERT INTO raza (nombre) VALUES ('Pastor Alemán');
INSERT INTO raza (nombre) VALUES ('Beagle');
INSERT INTO raza (nombre) VALUES ('Poodle');
INSERT INTO raza (nombre) VALUES ('Doberman');
INSERT INTO raza (nombre) VALUES ('Rottweiler');
INSERT INTO raza (nombre) VALUES ('Boxer');
INSERT INTO raza (nombre) VALUES ('Pitbull');
INSERT INTO raza (nombre) VALUES ('Shiba Inu');
INSERT INTO raza (nombre) VALUES ('Golden Retriever');
INSERT INTO raza (nombre) VALUES ('Pug');
INSERT INTO raza (nombre) VALUES ('Husky Siberiano');

-- 3. Insertar perro
INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, adoptado, protectora_id, cliente_id)
VALUES ('NombreChihuahua', 'chihuahua.png', TO_DATE('2020-03-10', 'YYYY-MM-DD'), 3, 'M', 'No', 1, NULL);

INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, adoptado, protectora_id, cliente_id)
VALUES ('NombreBulldog', 'bulldog.png', TO_DATE('2020-03-10', 'YYYY-MM-DD'), 2, 'F', 'No', 1, NULL);

INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, adoptado, protectora_id, cliente_id)
VALUES ('NombreShibaInu', 'shiba.png', TO_DATE('2020-03-10', 'YYYY-MM-DD'), 11, 'M', 'No', 1, NULL);

INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, adoptado, protectora_id, cliente_id)
VALUES ('NombreGoldenRetriever', 'golden-retriever.png', TO_DATE('2020-03-10', 'YYYY-MM-DD'), 12, 'F', 'No', 1, NULL);

INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, adoptado, protectora_id, cliente_id)
VALUES ('NombreHuskySiberiano', 'husky.png', TO_DATE('2020-03-10', 'YYYY-MM-DD'), 14, 'M', 'No', 1, NULL);

INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, adoptado, protectora_id, cliente_id)
VALUES ('NombreRottweiler', 'chop.png', TO_DATE('2020-03-10', 'YYYY-MM-DD'), 8, 'F', 'No', 1, NULL);

INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, adoptado, protectora_id, cliente_id)
VALUES ('NombrePug', 'Pugg.png', TO_DATE('2020-03-10', 'YYYY-MM-DD'), 13, 'M', 'No', 1, NULL);

-- 4. Insertar perro_patología
-- Para perro 1
INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (1, 1, 'Leve, requiere control veterinario anual');

INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (1, 2, 'Moderada, necesita tratamiento médico ocasional');

INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (1, 3, 'Grave, requiere atención médica urgente y tratamiento constante');

-- Para perro 2
INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (2, 1, 'Leve, seguimiento veterinario cada 6 meses');

INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (2, 4, 'Moderada, necesita medicamentos regulares para control');

-- Para perro 3
INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (3, 2, 'Leve, seguimiento veterinario anual');

INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (3, 5, 'Severa, necesita intervención quirúrgica y atención continua');

-- Para perro 4
INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (4, 1, 'Leve, control veterinario anual recomendado');

INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (4, 6, 'Grave, necesita terapia intensiva y seguimiento médico');

-- Para perro 5
INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (5, 3, 'Moderada, control veterinario cada 3 meses');


