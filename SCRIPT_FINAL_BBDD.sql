-- BORRADO COMPLETO DE OBJETOS EXISTENTES (en orden adecuado)

-- Triggers
BEGIN
    FOR rec IN (SELECT trigger_name FROM user_triggers) LOOP
        EXECUTE IMMEDIATE 'DROP TRIGGER ' || rec.trigger_name;
    END LOOP;
END;
/

-- Procedimientos y funciones
BEGIN
    EXECUTE IMMEDIATE 'DROP PROCEDURE enviar_notificacion';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP FUNCTION calcular_edad';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

-- Tablas (en orden de dependencias)
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE notificaciones CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE cita CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE solicitud_adopcion CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE perro_patologia CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE perro CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE patologia CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE raza CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE usuario_cliente CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE usuario_protectora CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE redes_sociales CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE cliente CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE protectora CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/


-- CREACI�N DE LAS TABLAS

CREATE TABLE protectora (
    protectora_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    cif VARCHAR2(50) UNIQUE,
    nombre VARCHAR2(100),
    telefono VARCHAR2(255) NOT NULL,
    correo_electronico VARCHAR2(255),
    localidad VARCHAR2(100),
    provincia VARCHAR2(100),
    pais VARCHAR2(100),
    tipo_via VARCHAR2(100),
    nombre_via VARCHAR2(100),
    codigo_postal VARCHAR2(10),
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE redes_sociales (
    id_protectora NUMBER,
    nombre_red VARCHAR2(100),
    usuario_red VARCHAR2(100),

    fecha_alta DATE,
    fecha_modificacion DATE,

    CONSTRAINT pk_redes PRIMARY KEY (id_protectora, nombre_red),
    CONSTRAINT fk_redes_protectora FOREIGN KEY (id_protectora)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE
);

CREATE TABLE cliente (
    cliente_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100),
    apellido1 VARCHAR2(100),
    apellido2 VARCHAR2(100),
    fecha_nacimiento DATE,
    telefono VARCHAR2(20),
    correo_electronico VARCHAR2(255),
    codigo_postal VARCHAR2(10),
    localidad VARCHAR2(100),
    provincia VARCHAR2(100),
    pais VARCHAR2(100),
    tipo_via VARCHAR2(100),
    nombre_via VARCHAR2(100),
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE usuario_cliente (
    id_usuario_cliente NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre_usuario VARCHAR2(100) UNIQUE,
    contrasena VARCHAR2(100) UNIQUE,
    correo_electronico VARCHAR2(255) UNIQUE,
    cliente_id NUMBER UNIQUE,
    fecha_alta DATE,
    fecha_modificacion DATE,

    CONSTRAINT fk_usuario_cliente_id FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE
);

CREATE TABLE usuario_protectora (
    id_usuario_protectora NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre_usuario VARCHAR2(100) UNIQUE,
    contrasena VARCHAR2(100) UNIQUE,
    correo_electronico VARCHAR2(255) UNIQUE,
    id_protectora NUMBER UNIQUE, 
    fecha_alta DATE,
    fecha_modificacion DATE,
    
    CONSTRAINT fk_usuario_protectora_id FOREIGN KEY (id_protectora)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE
);

CREATE TABLE raza (
    id_raza NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) UNIQUE,
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE patologia (
    id_patologia NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) UNIQUE,
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE perro (
    perro_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100),
    foto VARCHAR2(255),
    fecha_nacimiento DATE,
    raza NUMBER,
    sexo VARCHAR2(1) CHECK (sexo IN ('M', 'F')),
    adoptado VARCHAR2(2) CHECK (adoptado IN ('Si', 'No')),
    protectora_id NUMBER,
    cliente_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,
    
    CONSTRAINT fk_perro_protectora FOREIGN KEY (protectora_id)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_perro_raza FOREIGN KEY (raza)
        REFERENCES raza(id_raza),
    CONSTRAINT fk_perro_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE SET NULL
);

CREATE TABLE perro_patologia (
    perro_id NUMBER,
    id_patologia NUMBER,
    descripcion_pat VARCHAR2(255),
    fecha_alta DATE,
    fecha_modificacion DATE,
    CONSTRAINT pk_perro_patologia PRIMARY KEY (perro_id, id_patologia),
    CONSTRAINT fk_pp_perro FOREIGN KEY (perro_id)
        REFERENCES perro(perro_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_pp_patologia FOREIGN KEY (id_patologia)
        REFERENCES patologia(id_patologia)
);

CREATE TABLE solicitud_adopcion (
    perro_id NUMBER,
    cliente_id NUMBER,
    donacion NUMBER(10,2),
    estado VARCHAR2(50),
    fecha_alta DATE,
    fecha_modificacion DATE,
    
    CONSTRAINT pk_solicitud_adopcion PRIMARY KEY (perro_id, cliente_id),
    CONSTRAINT fk_solicitud_perro FOREIGN KEY (perro_id)
        REFERENCES perro(perro_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_solicitud_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE
);

CREATE TABLE cita (
    id_cita NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    donacion NUMBER(10,2),
    correo_electronico VARCHAR2(50),
    estado VARCHAR2(50) DEFAULT 'pendiente',
    fecha_cita DATE,
    hora_cita VARCHAR2(10),
    cliente_id NUMBER,
    perro_id NUMBER,
    protectora_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,

    CONSTRAINT fk_cita_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_cita_perro FOREIGN KEY (perro_id)
        REFERENCES perro(perro_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_cita_protectora FOREIGN KEY (protectora_id)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE
);

CREATE TABLE notificaciones (
    id_notificacion NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nueva_cita VARCHAR2(5),
    cancelar_cita VARCHAR2(5),
    nueva_adopcion VARCHAR2(5),
    cambio_solicitud VARCHAR2(5),
    protectora_id NUMBER,
    cliente_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,
    CONSTRAINT fk_notif_protectora FOREIGN KEY (protectora_id)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_notif_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE
);

-- FUNCIONES

-- Funci�n para calcular la edad
CREATE OR REPLACE FUNCTION calcular_edad(fecha_nacimiento DATE)
RETURN NUMBER
IS
    edad NUMBER;
BEGIN
    edad := TRUNC(MONTHS_BETWEEN(SYSDATE, fecha_nacimiento) / 12);
    RETURN edad;
END;
/

-- PROCEDIMIENTOS
CREATE OR REPLACE PROCEDURE enviar_notificacion (
    nueva_cita_noti IN VARCHAR2 DEFAULT 'No',
    cancelar_cita_noti IN VARCHAR2 DEFAULT 'No',
    nueva_adopcion_noti IN VARCHAR2 DEFAULT 'No',
    cambio_solicitud_noti IN VARCHAR2 DEFAULT 'No',
    protectora_id_noti IN NUMBER DEFAULT NULL,
    cliente_id_noti IN NUMBER DEFAULT NULL
)
IS
BEGIN
    INSERT INTO notificaciones (
        nueva_cita,
        cancelar_cita,
        nueva_adopcion,
        cambio_solicitud,
        protectora_id,
        cliente_id
    ) VALUES (
        nueva_cita_noti,
        cancelar_cita_noti,
        nueva_adopcion_noti,
        cambio_solicitud_noti,
        protectora_id_noti,
        cliente_id_noti
    );
END;
/

-- DISPARADORES FECHA ALTA Y FECHA MODIFICACI�N

-- Disparador para INSERT Cliente
CREATE OR REPLACE TRIGGER fecha_cliente_disparador_insert
BEFORE INSERT ON cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Cliente
CREATE OR REPLACE TRIGGER fecha_cliente_disparador_update
BEFORE UPDATE ON cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Protectora
CREATE OR REPLACE TRIGGER fecha_protectora_disparador_insert
BEFORE INSERT ON protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Protectora
CREATE OR REPLACE TRIGGER fecha_protectora_disparador_update
BEFORE UPDATE ON protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Raza
CREATE OR REPLACE TRIGGER fecha_raza_disparador_insert
BEFORE INSERT ON raza
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Raza
CREATE OR REPLACE TRIGGER fecha_raza_disparador_update
BEFORE UPDATE ON raza
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Patologia
CREATE OR REPLACE TRIGGER fecha_patologia_disparador_insert
BEFORE INSERT ON patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Patologia
CREATE OR REPLACE TRIGGER fecha_patologia_disparador_update
BEFORE UPDATE ON patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Perro
CREATE OR REPLACE TRIGGER fecha_perro_disparador_insert
BEFORE INSERT ON perro
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Perro
CREATE OR REPLACE TRIGGER fecha_perro_disparador_update
BEFORE UPDATE ON perro
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Perro-Patologia
CREATE OR REPLACE TRIGGER fecha_perro_patologia_disparador_insert
BEFORE INSERT ON perro_patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Perro-Patologia
CREATE OR REPLACE TRIGGER fecha_perro_patologia_disparador_update
BEFORE UPDATE ON perro_patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Solicitud-Adopcion
CREATE OR REPLACE TRIGGER fecha_solicitud_disparador_insert
BEFORE INSERT ON solicitud_adopcion
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Solicitud-Adopcion
CREATE OR REPLACE TRIGGER fecha_solicitud_disparador_update
BEFORE UPDATE ON solicitud_adopcion
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Cita
CREATE OR REPLACE TRIGGER fecha_cita_disparador_insert
BEFORE INSERT ON cita
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Cita
CREATE OR REPLACE TRIGGER fecha_cita_disparador_update
BEFORE UPDATE ON cita
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Notificaciones
CREATE OR REPLACE TRIGGER fecha_notificaciones_disparador_insert
BEFORE INSERT ON notificaciones
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Notificaciones
CREATE OR REPLACE TRIGGER fecha_notificaciones_disparador_update
BEFORE UPDATE ON notificaciones
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Redes Sociales
CREATE OR REPLACE TRIGGER fecha_redes_sociales_insert
BEFORE INSERT ON redes_sociales
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Redes Sociales
CREATE OR REPLACE TRIGGER fecha_redes_sociales_update
BEFORE UPDATE ON redes_sociales
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Usuario Cliente
CREATE OR REPLACE TRIGGER fecha_usuario_cliente_insert
BEFORE INSERT ON usuario_cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Usuario Cliente
CREATE OR REPLACE TRIGGER fecha_usuario_cliente_update
BEFORE UPDATE ON usuario_cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Usuario Protectora
CREATE OR REPLACE TRIGGER fecha_usuario_protectora_insert
BEFORE INSERT ON usuario_protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Usuario Protectora
CREATE OR REPLACE TRIGGER fecha_usuario_protectora_update
BEFORE UPDATE ON usuario_protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/


-- BORRADO DE DATOS

DELETE FROM notificaciones;
DELETE FROM cita;
DELETE FROM solicitud_adopcion;
DELETE FROM perro_patologia;
DELETE FROM perro;
DELETE FROM patologia;
DELETE FROM raza;
DELETE FROM usuario_cliente;
DELETE FROM usuario_protectora;
DELETE FROM redes_sociales;
DELETE FROM cliente;
DELETE FROM protectora;

-- Selects ID

SELECT protectora_id FROM protectora;
SELECT cliente_id FROM cliente;
SELECT id_raza FROM raza;
SELECT id_patologia FROM patologia;

-- INSERTS de datos

-- 1. Insertar protectora
INSERT INTO protectora (cif, nombre, telefono, correo_electronico, localidad, provincia, pais, tipo_via, nombre_via, codigo_postal)
VALUES ('G12345678', 'Protectora Esperanza', '123456789', 'esperanza@protectora.org', 'Madrid', 'Madrid', 'Espa�a', 'Calle', 'Libertad', '28001');

-- 2. Insertar redes sociales
INSERT INTO redes_sociales (id_protectora, nombre_red, usuario_red)
VALUES (1, 'Instagram', '@protectora_esperanza');

-- 3. Insertar cliente
INSERT INTO cliente (nombre, apellido1, apellido2, fecha_nacimiento, telefono, correo_electronico, codigo_postal, localidad, provincia, pais, tipo_via, nombre_via)
VALUES ('Luc�a', 'P�rez', 'Garc�a', TO_DATE('1990-06-15', 'YYYY-MM-DD'), '654987321', 'lucia.perez@gmail.com', '28002', 'Madrid', 'Madrid', 'Espa�a', 'Avenida', 'Castellana');

-- 4. Insertar usuarios
INSERT INTO usuario_cliente (nombre_usuario, contrasena, correo_electronico, cliente_id)
VALUES ('luciaPG', '1234secure', 'lucia.perez@gmail.com', 1);

INSERT INTO usuario_protectora (nombre_usuario, contrasena, correo_electronico, id_protectora)
VALUES ('adminEsperanza', 'admin123', 'admin@protectora.org', 1);

-- 5. Insertar patolog�a
INSERT INTO patologia (nombre) VALUES ('Alergia');
INSERT INTO patologia (nombre) VALUES ('Displasia de cadera');
INSERT INTO patologia (nombre) VALUES ('Problemas dentales');
INSERT INTO patologia (nombre) VALUES ('Artritis');
INSERT INTO patologia (nombre) VALUES ('Cardiopat�a');
INSERT INTO patologia (nombre) VALUES ('C�ncer');


-- 5.1. Insertar raza
INSERT INTO raza (nombre) VALUES ('Labrador');
INSERT INTO raza (nombre) VALUES ('Bulldog');
INSERT INTO raza (nombre) VALUES ('Chihuahua');
INSERT INTO raza (nombre) VALUES ('Pastor Aleman');
INSERT INTO raza (nombre) VALUES ('Beagle');
INSERT INTO raza (nombre) VALUES ('Poodle');
INSERT INTO raza (nombre) VALUES ('Doberman');
INSERT INTO raza (nombre) VALUES ('Rottweiler');
INSERT INTO raza (nombre) VALUES ('Boxer');
INSERT INTO raza (nombre) VALUES ('Pitbull');
INSERT INTO raza (nombre) VALUES ('Shiba Inu');
INSERT INTO raza (nombre) VALUES ('Golden Retrieber');
INSERT INTO raza (nombre) VALUES ('Pug');
INSERT INTO raza (nombre) VALUES ('Husky Siberiano');

-- 6. Insertar perro
INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, adoptado, protectora_id, cliente_id)
VALUES ('NombreChihuahua', 'chihuahua.png', TO_DATE('2020-03-10', 'YYYY-MM-DD'), 3, 'M', 'No', 1, NULL);

-- Repetir para los dem�s perros
INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, adoptado, protectora_id, cliente_id)
VALUES ('NombreBulldog', 'bulldog.png', TO_DATE('2020-03-10', 'YYYY-MM-DD'), 2, 'F', 'No', 1, NULL);

INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, adoptado, protectora_id, cliente_id)
VALUES ('NombreShibaInu', 'shiba.png', TO_DATE('2020-03-10', 'YYYY-MM-DD'), 11, 'M', 'No', 1, NULL);

INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, adoptado, protectora_id, cliente_id)
VALUES ('NombreGoldenRetriever', 'golden-retriever.png', TO_DATE('2020-03-10', 'YYYY-MM-DD'), 12, 'F', 'No', 1, NULL);

INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, adoptado, protectora_id, cliente_id)
VALUES ('NombreHuskySiberiano', 'husky.png', TO_DATE('2020-03-10', 'YYYY-MM-DD'), 14, 'M', 'No', 1, NULL);

INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, adoptado, protectora_id, cliente_id)
VALUES ('NombreRottweiler', 'chop.png', TO_DATE('2020-03-10', 'YYYY-MM-DD'), 8, 'F', 'No', 1, NULL);

INSERT INTO perro (nombre, foto, fecha_nacimiento, raza, sexo, adoptado, protectora_id, cliente_id)
VALUES ('NombrePug', 'Pugg.png', TO_DATE('2020-03-10', 'YYYY-MM-DD'), 13, 'M', 'No', 1, NULL);

-- 7. Insertar perro_patolog�a
-- Para perro 1
INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (1, 1, 'Leve, requiere control veterinario anual');

INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (1, 2, 'Moderada, necesita tratamiento m�dico ocasional');

INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (1, 3, 'Grave, requiere atenci�n m�dica urgente y tratamiento constante');

-- Para perro 2
INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (2, 1, 'Leve, seguimiento veterinario cada 6 meses');

INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (2, 4, 'Moderada, necesita medicamentos regulares para control');

-- Para perro 3
INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (3, 2, 'Leve, seguimiento veterinario anual');

INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (3, 5, 'Severa, necesita intervenci�n quir�rgica y atenci�n continua');

-- Para perro 4
INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (4, 1, 'Leve, control veterinario anual recomendado');

INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (4, 6, 'Grave, necesita terapia intensiva y seguimiento m�dico');

-- Para perro 5
INSERT INTO perro_patologia (perro_id, id_patologia, descripcion_pat)
VALUES (5, 3, 'Moderada, control veterinario cada 3 meses');

-- 8. Insertar solicitud de adopci�n
INSERT INTO solicitud_adopcion (perro_id, cliente_id, donacion, estado)
VALUES (1, 1, 50.00, 'Pendiente');


-- 10. Insertar notificaci�n (usando el procedimiento)
BEGIN
    enviar_notificacion(
        nueva_cita_noti => 'S�',
        cancelar_cita_noti => 'No',
        nueva_adopcion_noti => 'S�',
        cambio_solicitud_noti => 'No',
        protectora_id_noti => 1,
        cliente_id_noti => 1
    );
END;
/