-- CREACIÓN DE LAS TABLAS

CREATE TABLE protectora (
    protectora_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    cif VARCHAR2(50) UNIQUE,
    nombre VARCHAR2(100),
    telefono VARCHAR2(255) NOT NULL,
    correo_electronico VARCHAR2(255),
    localidad VARCHAR2(100),
    provincia VARCHAR2(100),
    pais VARCHAR2(100),
    tipo_via VARCHAR2(100),
    nombre_via VARCHAR2(100),
    codigo_postal VARCHAR2(10),
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE redes_sociales (
    id_red_social NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_protectora NUMBER,
    red_social VARCHAR2(255),
    fecha_alta DATE,
    fecha_modificacion DATE,
    CONSTRAINT fk_redes_protectora FOREIGN KEY (id_protectora)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE
);

CREATE TABLE cliente (
    cliente_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100),
    apellido1 VARCHAR2(100),
    apellido2 VARCHAR2(100),
    fecha_nacimiento DATE,
    telefono VARCHAR2(20),
    correo_electronico VARCHAR2(255),
    codigo_postal VARCHAR2(10),
    localidad VARCHAR2(100),
    provincia VARCHAR2(100),
    pais VARCHAR2(100),
    tipo_via VARCHAR2(100),
    nombre_via VARCHAR2(100),
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE usuario_cliente (
    id_usuario_cliente NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre_usuario VARCHAR2(100) UNIQUE,
    contrasena VARCHAR2(100),
    correo_electronico VARCHAR2(255) UNIQUE,
    cliente_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,

    CONSTRAINT fk_usuario_cliente_id FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE
);

CREATE TABLE usuario_protectora (
    id_usuario_protectora NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre_usuario VARCHAR2(100) UNIQUE,
    contrasena VARCHAR2(100),
    correo_electronico VARCHAR2(255) UNIQUE,
    id_protectora NUMBER, 
    fecha_alta DATE,
    fecha_modificacion DATE,
    
    CONSTRAINT fk_usuario_protectora_id FOREIGN KEY (id_protectora)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE
);

CREATE TABLE raza (
    id_raza NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) UNIQUE,
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE patologia (
    id_patologia NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) UNIQUE,
    fecha_alta DATE,
    fecha_modificacion DATE
);

CREATE TABLE perro (
    perro_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100),
    foto VARCHAR2(255),
    fecha_nacimiento DATE,
    raza NUMBER,
    sexo VARCHAR2(10),
    adoptado VARCHAR2(2) DEFAULT 'No',
    protectora_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,
    CONSTRAINT fk_perro_protectora FOREIGN KEY (protectora_id)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_perro_raza FOREIGN KEY (raza)
        REFERENCES raza(id_raza)
);

CREATE TABLE perro_patologia (
    id_perro_patologia NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    perro_id NUMBER,
    id_patologia NUMBER,
    descripcion_pat VARCHAR2(255),
    fecha_alta DATE,
    fecha_modificacion DATE,
    CONSTRAINT fk_pp_perro FOREIGN KEY (perro_id)
        REFERENCES perro(perro_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_pp_patologia FOREIGN KEY (id_patologia)
        REFERENCES patologia(id_patologia)
);

CREATE TABLE solicitud_adopcion (
    id_solicitud NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    donacion NUMBER(10,2),
    estado VARCHAR2(50),
    perro_id NUMBER,
    cliente_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,
    
    CONSTRAINT fk_solicitud_perro FOREIGN KEY (perro_id)
        REFERENCES perro(perro_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_solicitud_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE
);

-- CREACIÓN DE LA TABLA CITA
CREATE TABLE cita (
    id_cita NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    donacion NUMBER(10,2),
    estado VARCHAR2(50) DEFAULT 'pendiente',
    fecha_cita DATE,
    hora_cita VARCHAR2(10),
    cliente_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,
    
    CONSTRAINT fk_cita_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
);

CREATE TABLE notificaciones (
    id_notificacion NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nueva_cita VARCHAR2(5),
    cancelar_cita VARCHAR2(5),
    nueva_adopcion VARCHAR2(5),
    cambio_solicitud VARCHAR2(5),
    protectora_id NUMBER,
    cliente_id NUMBER,
    fecha_alta DATE,
    fecha_modificacion DATE,
    CONSTRAINT fk_notif_protectora FOREIGN KEY (protectora_id)
        REFERENCES protectora(protectora_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_notif_cliente FOREIGN KEY (cliente_id)
        REFERENCES cliente(cliente_id)
        ON DELETE CASCADE
);

-- FUNCIONES

-- Función para calcular la edad
CREATE OR REPLACE FUNCTION calcular_edad(fecha_nacimiento DATE)
RETURN NUMBER
IS
    edad NUMBER;
BEGIN
    edad := TRUNC(MONTHS_BETWEEN(SYSDATE, fecha_nacimiento) / 12);
    RETURN edad;
END;
/

-- PROCEDIMIENTOS
CREATE OR REPLACE PROCEDURE enviar_notificacion (
    nueva_cita_noti IN VARCHAR2 DEFAULT 'No',
    cancelar_cita_noti IN VARCHAR2 DEFAULT 'No',
    nueva_adopcion_noti IN VARCHAR2 DEFAULT 'No',
    cambio_solicitud_noti IN VARCHAR2 DEFAULT 'No',
    protectora_id_noti IN NUMBER DEFAULT NULL,
    cliente_id_noti IN NUMBER DEFAULT NULL
)
IS
BEGIN
    INSERT INTO notificaciones (
        nueva_cita,
        cancelar_cita,
        nueva_adopcion,
        cambio_solicitud,
        protectora_id,
        cliente_id
    ) VALUES (
        nueva_cita_noti,
        cancelar_cita_noti,
        nueva_adopcion_noti,
        cambio_solicitud_noti,
        protectora_id_noti,
        cliente_id_noti
    );
END;
/

-- DISPARADORES FECHA ALTA Y FECHA MODIFICACIÓN

-- Disparador para INSERT Cliente
CREATE OR REPLACE TRIGGER fecha_cliente_disparador_insert
BEFORE INSERT ON cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Cliente
CREATE OR REPLACE TRIGGER fecha_cliente_disparador_update
BEFORE UPDATE ON cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Protectora
CREATE OR REPLACE TRIGGER fecha_protectora_disparador_insert
BEFORE INSERT ON protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Protectora
CREATE OR REPLACE TRIGGER fecha_protectora_disparador_update
BEFORE UPDATE ON protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Raza
CREATE OR REPLACE TRIGGER fecha_raza_disparador_insert
BEFORE INSERT ON raza
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Raza
CREATE OR REPLACE TRIGGER fecha_raza_disparador_update
BEFORE UPDATE ON raza
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Patologia
CREATE OR REPLACE TRIGGER fecha_patologia_disparador_insert
BEFORE INSERT ON patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Patologia
CREATE OR REPLACE TRIGGER fecha_patologia_disparador_update
BEFORE UPDATE ON patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Perro
CREATE OR REPLACE TRIGGER fecha_perro_disparador_insert
BEFORE INSERT ON perro
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Perro
CREATE OR REPLACE TRIGGER fecha_perro_disparador_update
BEFORE UPDATE ON perro
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Perro-Patologia
CREATE OR REPLACE TRIGGER fecha_perro_patologia_disparador_insert
BEFORE INSERT ON perro_patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Perro-Patologia
CREATE OR REPLACE TRIGGER fecha_perro_patologia_disparador_update
BEFORE UPDATE ON perro_patologia
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;

-- Disparador para INSERT Solicitud-Adopcion
CREATE OR REPLACE TRIGGER fecha_solicitud_disparador_insert
BEFORE INSERT ON solicitud_adopcion
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Solicitud-Adopcion
CREATE OR REPLACE TRIGGER fecha_solicitud_disparador_update
BEFORE UPDATE ON solicitud_adopcion
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Cita
CREATE OR REPLACE TRIGGER fecha_cita_disparador_insert
BEFORE INSERT ON cita
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Cita
CREATE OR REPLACE TRIGGER fecha_cita_disparador_update
BEFORE UPDATE ON cita
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Notificaciones
CREATE OR REPLACE TRIGGER fecha_notificaciones_disparador_insert
BEFORE INSERT ON notificaciones
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Notificaciones
CREATE OR REPLACE TRIGGER fecha_notificaciones_disparador_update
BEFORE UPDATE ON notificaciones
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Redes Sociales
CREATE OR REPLACE TRIGGER fecha_redes_sociales_insert
BEFORE INSERT ON redes_sociales
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Redes Sociales
CREATE OR REPLACE TRIGGER fecha_redes_sociales_update
BEFORE UPDATE ON redes_sociales
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Usuario Cliente
CREATE OR REPLACE TRIGGER fecha_usuario_cliente_insert
BEFORE INSERT ON usuario_cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Usuario Cliente
CREATE OR REPLACE TRIGGER fecha_usuario_cliente_update
BEFORE UPDATE ON usuario_cliente
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para INSERT Usuario Protectora
CREATE OR REPLACE TRIGGER fecha_usuario_protectora_insert
BEFORE INSERT ON usuario_protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_alta := SYSDATE;
    :NEW.fecha_modificacion := SYSDATE;
END;
/

-- Disparador para UPDATE Usuario Protectora
CREATE OR REPLACE TRIGGER fecha_usuario_protectora_update
BEFORE UPDATE ON usuario_protectora
FOR EACH ROW
BEGIN
    :NEW.fecha_modificacion := SYSDATE;
END;
/